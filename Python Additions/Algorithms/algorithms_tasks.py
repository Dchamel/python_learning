from time import perf_counter


def working_time_prec(prec=2):
    def working_time(func):
        def wrapper(*args, **kwargs):
            t1 = perf_counter()
            ret = func(*args, **kwargs)
            t2 = perf_counter()
            print(f'Working time: {t2 - t1:.{prec}f} seconds. Function: {func.__name__}')
            return ret

        return wrapper

    return working_time


# @working_time_prec(7)
def summator(last_sum: int) -> int:
    """
    Input number (int)
    Returns sum of numbers in range 1 to last_sum 1+2+3... etc
    """
    if last_sum == 0:
        return 0
    elif last_sum == 1:
        return 1
    else:
        return last_sum + summator(last_sum - 1)


def task1_fibonacci_gigachat(n: int) -> int:
    """Algorithm by recursion for Fibonacci numbers generated by AI on LLM Gigachat"""
    if n == 0 or n == 1:
        return n
    else:
        return task1_fibonacci_gigachat(n - 1) + task1_fibonacci_gigachat(n - 2)


@working_time_prec(7)
def task2_smallest_elem(arr: list[int]) -> int:
    """We can use here bubble sort algorithm to find the smallest"""
    n = len(arr)
    for i in range(n):
        for j in range(0, n - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]

    return arr[0]


@working_time_prec(7)
def task2_smallest_elem_sb(arr: list[int]) -> int:
    """Algorithm to find the smallest taken from SB"""
    min_el = arr[0]

    for element in arr:
        if element < min_el:
            min_el = element

    return min_el


# @working_time_prec()
def main():
    print(summator(5))
    # task1
    print(task1_fibonacci_gigachat(5))
    # task2
    print(task2_smallest_elem([7, 2, 4, 1, 9, 3, 67, 2, 4, 1, 9, 3, 6]))
    print(task2_smallest_elem_sb([7, 2, 4, 1, 9, 3, 67, 2, 4, 1, 9, 3, 6]))


if __name__ == '__main__':
    main()
